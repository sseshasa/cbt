#!/usr/bin/python3
#
# fio-plot-stats.py - script to parse fio workload generation results
# for interesting statistics and generate PyPlot graphs. Idea is to
# parse results generated in json and csv by fio and make use of PyPlot
# module to generate graphs that will provide insights on Ceph performance
#
# Command synopsis:
# $ fio-plot-stats.py -h
# usage: fio-plot-stats.py [-h] -f {json,csv} -s SRCDIR -d DESTDIR -o
#                         {read,write} -m {bw,lat,pct} [-i {pdf,png}]
#                         [-n FILENAME] [-r TIMERANGE TIMERANGE] [-p]
#
# Generate plots from fio output
#
# optional arguments:
#   -h, --help            show this help message and exit
#   -f {json,csv}, --filetype {json,csv}
#                         type of file to parse
#   -s SRCDIR, --source SRCDIR
#                         source directory containing fio output files
#   -d DESTDIR, --destination DESTDIR
#                         destination directory to save generated plots
#   -o {read,write}, --optype {read,write}
#                         plot read or write stats
#   -m {bw,lat,pct}, --metric {bw,lat,pct}
#                         metric to analyze/plot
#   -i {pdf,png}, --imgformat {pdf,png}
#                         plot image format
#   -n FILENAME, --filename FILENAME
#                         source file containing CSV data to analyze/plot
#   -r TIMERANGE TIMERANGE, --timerange TIMERANGE TIMERANGE
#                         time range to plot/calculate stats for CSV data
#   -p, --subplot         create a subplot with provided timerange
#
# The input to this script can be a directory containing fio log file(s)
# in either,
# - JSON format
# - CSV format
#
# The input --filetype is mandatory. Depending on this, additional
# options if preferred may be provided to override the default behavior.
# For JSON file type, the tool scans for the files in the source
# directory and generates graphs. For CSV file type, an additional
# parameter called --filename needs to be specified.
#
# An additional artifact (apart from charts) of parsing JSON data is a
# CSV file containing the stats from the parsed files.

# NOTE: All fio files in the source directory having 'json'
# string in filename are treated as JSON files and are scanned
# automatically. Therefore, it is important to have 'json' string
# in the filename if JSON data is required to be visualized.
#
# Example 1:
# The following commands scan the source directory for files having
# string 'json' in the filenames and parses specfied stats (lat, bw or pct)
# from the files to generate comparison graphs in the destination folder:
#
# $python3 fio-plot-stats.py -s ~/cbt_logs/json_logs -f json -o write -d ~/cbt_logs/json_logs -m lat
# $python3 fio-plot-stats.py -s ~/cbt_logs/json_logs -f json -o write -d ~/cbt_logs/json_logs -m bw
# $python3 fio-plot-stats.py -s ~/cbt_logs/json_logs -f json -o write -d ~/cbt_logs/json_logs -m pct
#
# Example 2:
# The following command uses the specified CSV file containing write latency
# stats generated by fio and generates a chart of latency distribution across
# the entire duration of the test:
#
# $python3 fio-plot-stats.py -f csv -s ~/cbt_logs -d ~/cbt_logs -o write -n wpq_clat_Run7 -m lat
#
# Example 3:
# The following command is similar to Example 2, except that additionally a
# subplot is generated in the same chart showing the latency distribution
# in the specified time range:
#
# $python3 fio-plot-stats.py -f csv -s ~/cbt_logs -d ~/cbt_logs -o write -n wpq_clat_Run7 -m lat -r 0 160 -p
#
# Note that if the '-p/--subplot' option is not specified in example 3, a
# chart with a single graph is generated for the time range specified.
#
# Plots may be generated for 'bandwidth' metric by specifying 'bw' for the
# '-m' parameter in the above examples.
import os
import argparse
from fiostatsparser import Parsejson
from fiostatsparser import Parsecsv
from fioplotter import Barplot
from fioplotter import Lineplot

def dir_path(path):
  if os.path.isdir(path):
    return path
  else:
    raise argparse.ArgumentTypeError(f"{path} is not a valid directory.")

def parse_args():
  parser = argparse.ArgumentParser(description='Generate plots from fio output')
  parser.add_argument('-f', '--filetype', dest='ftype', required=True, choices=['json', 'csv'], help='type of file to parse')
  parser.add_argument('-s', '--source', dest='srcdir', required=True, type=dir_path, help='source directory containing fio output files')
  parser.add_argument('-d', '--destination', dest='destdir', required=True, type=dir_path, help='destination directory to save generated plots')
  parser.add_argument('-o', '--optype', dest='optype', required=True, choices=['read', 'write'], help='plot read or write stats')
  parser.add_argument('-m', '--metric', dest='metric', required=True, choices=['bw', 'lat', 'pct'], help='metric to analyze/plot')
  parser.add_argument('-i', '--imgformat', dest='imgformat', required=False, choices=['pdf', 'png'], default='png', help='plot image format')
  parser.add_argument('-n', '--filename', dest='filename', required=False, help='source file containing CSV data to analyze/plot')
  parser.add_argument('-r', '--timerange', dest='timerange', nargs=2, required=False, type=float, help='time range to plot/calculate stats for CSV data')
  parser.add_argument('-p', '--subplot', dest='subplot', required=False, action='store_true', help='create a subplot with provided timerange')
  args = parser.parse_args()

  # Check some dependencies & do some error checks
  if args.ftype == 'csv' and not args.filename:
    parser.error("Argument -n/--filename: filename not provided.")
  if args.ftype == 'json' and (args.filename or args.timerange or args.subplot):
    parser.error("Arguments -n/--filename, -r/--timerange and -p/--subplot are incompatible with 'json' filetype.")
  if args.subplot and not args.timerange:
    parser.error("Argument -p/--subplot requires -r/--timerange to be specified.")
  if args.timerange and args.timerange[0] > args.timerange[1]:
    parser.error("Argument -r/--timerange: Incorrect timerange provided.")

  return args

if __name__ == '__main__':
  args = parse_args()

  # Parse data and generate plots
  if args.ftype == 'json':
    print("Parsing JSON data...")
    pj = Parsejson(args)
    print("Creating plots...")
    Barplot(args, pj)

  if args.ftype == 'csv':
    print("Parsing CSV data...")
    pcsv = Parsecsv(args)
    print("Creating plots...")
    Lineplot(args, pcsv)

